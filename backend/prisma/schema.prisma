// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int        @id @default(autoincrement())
  googleId  String     @unique
  email     String     @unique
  name      String
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  sessions  Session[]
  employees Employee[]
}

model Session {
  id           String   @id @default(uuid())
  sessionId    String   @unique
  companyId    Int
  refreshToken String   @unique
  deviceInfo   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  lastUsedAt   DateTime @default(now())
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Employee {
  id            Int             @id @default(autoincrement())
  name          String
  phoneNumber   String
  joinDate      DateTime        @default(now())
  status        EmployeeStatus  @default(ACTIVE)
  companyId     Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  salaryHistory SalaryHistory[]
  attendance    Attendance[]
  payment       Payment[]

  @@index([companyId])
}

model SalaryHistory {
  id         Int       @id @default(autoincrement())
  employeeId Int
  companyId  Int
  hourlyRate Float
  startDate  DateTime  @db.Date
  endDate    DateTime? @db.Date
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, startDate, endDate])
}

model Attendance {
  id         Int              @id @default(autoincrement())
  date       DateTime         @db.Date
  startTime  DateTime
  endTime    DateTime
  hours      Float
  status     AttendanceStatus
  employeeId Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  employee   Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@index([date])
}

model Payment {
  id          Int         @id @default(autoincrement())
  amount      Float
  type        PaymentType
  month       DateTime    @db.Date
  employeeId  Int
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  employee    Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

enum PaymentType {
  FULL
  ADVANCE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_DAY
  LEAVE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
}
